; Addition
(defun add()
    (terpri)
    (princ "Enter a: ")
    (setq a (read))
    (princ "Enter b: ")
    (setq b (read))
    (setq res (+ a b))
    (princ "Result: ")
    (write res))

; Subtraction
(defun sub()
    (terpri)
    (princ "Enter a: ")
    (setq a (read))
    (princ "Enter b: ")
    (setq b (read))
    (setq res (- a b))
    (princ "Result: ")
    (write res))

; Multiplication
(defun mult()
    (terpri)
    (princ "Enter a: ")
    (setq a (read))
    (princ "Enter b: ")
    (setq b (read))
    (setq res (* a b))
    (princ "Result: ")
    (write res))

; Division
(defun div()
    (terpri)
    (princ "Enter a: ")
    (setq a (read))
    (princ "Enter b: ")
    (setq b (read))
    (setq res (/ a b))
    (princ "Result: ")
    (write res))

; Modulus
(defun modl()
    (terpri)
    (princ "Enter a: ")
    (setq a (read))
    (princ "Enter b: ")
    (setq b (read))
    (setq res (mod a b))
    (princ "Result: ")
    (write res))

; Maximum
(defun maxm()
    (terpri)
    (princ "Enter a: ")
    (setq a (read))
    (princ "Enter b: ")
    (setq b (read))
    (setq res (max a b))
    (princ "Result: ")
    (write res))

; Minimum
(defun minm()
    (terpri)
    (princ "Enter a: ")
    (setq a (read))
    (princ "Enter b: ")
    (setq b (read))
    (setq res (min a b))
    (princ "Result: ")
    (write res))

; Average
(defun avg()
    (terpri)
    (princ "Enter a: ")
    (setq a (read))
    (princ "Enter b: ")
    (setq b (read))
    (setq res (/ (+ a b) 2))
    (princ "Result: ")
    (write res))

; Exponential
(defun expn()
    (terpri)
    (princ "Enter base: ")
    (setq base (read))
    (princ "Enter power: ")
    (setq power (read))
    (setq res (expt base power))
    (princ "Result: ")
    (write res))

; Factorial
(defun factor()
    (terpri)
    (princ "Enter number: ")
    (setq num (read))
    (defun fact(n)
        (if (eql n 0) 1
            (* n (fact (- n 1)))))
    (princ "Result: ")
    (write (fact num)))

; Main Function
(defun calc()
    (terpri) ; New line function
    (princ "----LISP ALGEBRAIC CALCULATOR----")
    (terpri)
    (terpri)
    (format t "1. ADDITION ~a 2. SUBTRACT ~a 3. MULTIPLY ~a 4. DIVIDE ~a 5. MODULUS" #\tab #\tab #\tab #\tab)
    (terpri)
    (format t "6. MAXIMUM ~a 7. MINIMUM  ~a 8. AVERAGE ~a 9. EXPONENT ~a 10. FACTORIAL" #\tab  #\tab #\tab #\tab)
    (terpri)
    (terpri)
    (princ "Enter your option: ")
    (setq op (read))
    (loop while (and (>= op 1) (<= op 10)) do 
        (case op
            (1 (add))
            (2 (sub))
            (3 (mult))
            (4 (div))
            (5 (modl))
            (6 (maxm))
            (7 (minm))
            (8 (avg))
            (9 (expn))
            (10 (factor)))
        (terpri)
        (terpri)
        (princ "Enter your option: ")
        (setq op (read))))

(calc)