; Addition
(defun add()
    (terpri)
    (princ "Enter a: ")
    (setq a (read))
    (princ "Enter b: ")
    (setq b (read))
    (setq res (+ a b))
    (princ "Result: ")
    (write res))

; Subtraction
(defun sub()
    (terpri)
    (princ "Enter a: ")
    (setq a (read))
    (princ "Enter b: ")
    (setq b (read))
    (setq res (- a b))
    (princ "Result: ")
    (write res))

; Multiplication
(defun mult()
    (terpri)
    (princ "Enter a: ")
    (setq a (read))
    (princ "Enter b: ")
    (setq b (read))
    (setq res (* a b))
    (princ "Result: ")
    (write res))

; Division
(defun div()
    (terpri)
    (princ "Enter a: ")
    (setq a (read))
    (princ "Enter b: ")
    (setq b (read))
    (setq res (/ a b))
    (princ "Result: ")
    (write res))

; Modulus
(defun modl()
    (terpri)
    (princ "Enter a: ")
    (setq a (read))
    (princ "Enter b: ")
    (setq b (read))
    (setq res (mod a b))
    (princ "Result: ")
    (write res))

; Maximum
(defun maxm()
    (terpri)
    (princ "Enter a: ")
    (setq a (read))
    (princ "Enter b: ")
    (setq b (read))
    (setq res (max a b))
    (princ "Result: ")
    (write res))

; Minimum
(defun minm()
    (terpri)
    (princ "Enter a: ")
    (setq a (read))
    (princ "Enter b: ")
    (setq b (read))
    (setq res (min a b))
    (princ "Result: ")
    (write res))

; Average
(defun avg()
    (terpri)
    (princ "Enter a: ")
    (setq a (read))
    (princ "Enter b: ")
    (setq b (read))
    (setq res (/ (+ a b) 2))
    (princ "Result: ")
    (write res))

; Exponential
(defun expn()
    (terpri)
    (princ "Enter base: ")
    (setq base (read))
    (princ "Enter power: ")
    (setq power (read))
    (setq res (expt base power))
    (princ "Result: ")
    (write res))

; Factorial
(defun factor()
    (terpri)
    (princ "Enter number: ")
    (setq num (read))
    (defun fact(n)
        (if (eql n 0) 1
            (* n (fact (- n 1)))))
    (princ "Result: ")
    (write (fact num)))

; Square
(defun square()
    (princ "Enter side: ")
    (setq s (read))
    (setq peri (* 4 s ))
    (princ "Perimeter: ")
    (write peri)
    (setq ar (* s s))
    (princ "Area: ")
    (write ar))

; Rectangle
(defun rect()
    (princ "Enter length: ")
    (setq l (read))
    (princ "Enter width: ")
    (setq w (read))
    (setq peri (* 2 (+ l w)))
    (princ "Perimeter: ")
    (write peri)
    (setq ar (* l w))
    (princ "Area: ")
    (write ar))

; Triangle
(defun tri()
    (princ "Enter base: ")
    (setq b (read))
    (princ "Enter Height: ")
    (setq h (read))
    (setq ar (/ (* b h) 2))
    (princ "Area: ")
    (write ar))

; Circle
(defun crcl()
    (defconstant PI 3.14)
    (princ "Enter radius: ")
    (setq r (read))
    (setq peri (* 2 PI r))
    (princ "Perimeter: ")
    (write peri)
    (setq ar (* PI r r))
    (princ "Area: ")
    (write ar))

; Parallelogram
(defun prlgm()
    (princ "Enter base: ")
    (setq b (read))
    (princ "Enter Height: ")
    (setq h (read))
    (setq ar (* b h))
    (princ "Area: ")
    (write ar))

; Trapezium
(defun trpz()
    (princ "Enter side A: ")
    (setq a (read))
    (princ "Enter side b: ")
    (setq b (read))
     (princ "Enter height: ")
    (setq h (read))
    (setq ar (* (/ (+ a b) 2) h))
    (princ "Area: ")
    (write ar))

; Cube
(defun cube()
    (princ "Enter side: ")
    (setq s (read))
    (setq sa (* 6 s s))
    (princ "Surface Area: ")
    (write sa)
    (setq vol (* s s s))
    (princ "Volume: ")
    (write vol))   

; Cuboid
(defun cuboid()
    (princ "Enter Length: ")
    (setq l (read))
    (princ "Enter Width: ")
    (setq w (read))
    (princ "Enter Height: ")
    (setq h (read))
    (setq sa (+ (* 2 l w) (* 2 w h) (* 2 h l)))
    (princ "Surface Area: ")
    (write sa)
    (setq vol (* l w h))
    (princ "Volume: ")
    (write vol))  

; Pyramid
(defun pyramid()
    (princ "Enter Length: ")
    (setq l (read))
    (princ "Enter Width: ")
    (setq w (read))
    (princ "Enter Height: ")
    (setq h (read))
    (setq vol (/ (* l w h) 3))
    (princ "Volume: ")
    (write vol)) 

; Cyllinder
(defun cyllinder()
    (defconstant PI 3.14)
    (princ "Enter Radius: ")
    (setq r (read))
    (princ "Enter Height: ")
    (setq h (read))
    (setq sa (* 2 PI r (+ r h)))
    (princ "Surface Area: ")
    (write sa)
    (setq vol (* PI r  r h))
    (princ "Volume: ")
    (write vol))  

; Cone
(defun cone()
    (defconstant PI 3.14)
    (princ "Enter Radius: ")
    (setq r (read))
    (princ "Enter Height: ")
    (setq h (read))
    (setq vol (/ (* PI r  r h) 3))
    (princ "Volume: ")
    (write vol))  

; Sphere
(defun sphere()
    (defconstant PI 3.14)
    (princ "Enter Radius: ")
    (setq r (read))
    (setq sa (* 4 PI r r))
    (princ "Surface Area: ")
    (write sa)
    (setq vol (/ (* 4 PI r  r) 3))
    (princ "Volume: ")
    (write vol))  

; Main Function
(defun calc()
    (terpri) ; New line function
    (princ "---------------------------------------------")
    (terpri)
    (princ "----LISP ALGEBRAIC & GEOMETRIC CALCULATOR----")
    (terpri)
    (princ "---------------------------------------------")
    (terpri)
    (terpri)
    (format t "1. ADDITION ~a 2. SUBTRACT ~a 3. MULTIPLY ~a 4. DIVIDE ~a 5. MODULUS" #\tab #\tab #\tab #\tab)
    (terpri)
    (format t "6. MAXIMUM ~a 7. MINIMUM  ~a 8. AVERAGE ~a 9. EXPONENT ~a 10. FACTORIAL" #\tab #\tab #\tab #\tab)
    (terpri)
    (format t "11. SQUARE ~a 12. RECTANGLE ~a 13. TRIANGLE ~a 14. CIRCLE ~a 15. PARALLELOGRAM ~a 16. TRAPEZIUM" #\tab #\tab #\tab #\tab #\tab)
    (terpri)
    (format t "17. CUBE ~a 18. CUBOID ~a 19. PYRAMID ~a 20. CYLLINDER ~a 21. CONE ~a 22. SPHERE" #\tab #\tab #\tab #\tab #\tab)
    (terpri)
    (terpri)
    (princ "Enter your option: ")
    (setq op (read))
    (loop while (and (>= op 1) (<= op 22)) do 
        (case op
            (1 (add))
            (2 (sub))
            (3 (mult))
            (4 (div))
            (5 (modl))
            (6 (maxm))
            (7 (minm))
            (8 (avg))
            (9 (expn))
            (10 (factor))
            (11 (square ))
            (12 (rect))
            (13 (tri))
            (14 (crcl))
            (15 (prlgm))
            (16 (trpz))
            (17 (cube))
            (18 (cuboid))
            (19 (pyramid))
            (20 (cyllinder))
            (21 (cone))
            (22 (sphere)))
        (terpri)
        (terpri)
        (princ "Enter your option: ")
        (setq op (read))))

(calc)
